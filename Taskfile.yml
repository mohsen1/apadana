version: '3'

vars:
  PRODUCTION_DOMAIN: https://www.apadana.app
  DEVELOPMENT_DOMAIN: https://dev.apadana.local
  PROD_DEV_DOMAIN: https://prod.apadana.local
  PRISMA_SCHEMA: src/prisma/schema.prisma
  DOCKER_COMPOSE: src/docker/docker-compose.yml
  VITEST_CONFIG: config/vitest.config.ts
  STORYBOOK_CONFIG: config/playwright.storybook.config.ts
  E2E_CONFIG: src/e2e/playwright.config.ts
  E2E_TESTING_SECRET_DEV: e2e_testing_secret_for_dev
  E2E_TESTING_SECRET_PROD: e2e_testing_secret_for_prod
  NON_ESLINT_FILES: "**/*.{json,css,md,webmanifest,yml,yaml}"
  ESLINT_FILES: "**/*.{js,jsx,ts,tsx,mjs}"
  ESLINT_CONFIG: config/eslint.config.mjs
  CDK_SCRIPTS: src/aws-setup/scripts
  SCRIPTS: src/scripts
  # Standardized environment names
  ENV:
    sh: echo "${VERCEL_ENV:-${AWS_DEPLOYMENT_STACK_ENV:-development}}"

env:
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"
  AVOID_UPDATE_NOTIFIER: "1"
  NODE_OPTIONS: --no-warnings
  # Export standardized environment
  AWS_DEPLOYMENT_STACK_ENV:
    sh: echo ${ENV}

tasks:
  i:
    desc: Alias for install
    cmds:
      - task: install
  install:
    desc: Install dependencies
    cmds:
      - pnpm install --prefer-offline

  fetch:
    desc: Fetch dependencies
    cmds:
      - |
        if [ ! -f pnpm-lock.yaml ]; then
          echo "Error: pnpm-lock.yaml not found"
          exit 1
        fi
        if ! pnpm -v &>/dev/null; then
          echo "Error: pnpm not installed"
          exit 1
        fi
        pnpm fetch

  build:
    desc: Build the application
    deps: [prisma:generate]
    cmds:
      - pnpm next build

  next:start:
    desc: Start Next.js production server
    cmds:
      - pnpm next start

  dev:
    desc: Start development environment
    deps: [prisma:generate, prisma:migrate]
    cmds:
      - task: dev:all:parallel

  dev:all:parallel:
    internal: true
    cmds:
      - pnpm concurrently "task dev:next" "task dev:prisma" "task dev:storybook"

  dev:next:
    desc: Start Next.js development server
    cmds:
      - pnpm next dev --turbo

  dev:prisma:
    desc: Watch Prisma schema changes
    cmds:
      - pnpm prisma generate --schema={{.PRISMA_SCHEMA}} --no-hints --watch

  dev:prisma:migrate:
    desc: Run Prisma migrations
    cmds:
      - pnpm prisma migrate dev --schema={{.PRISMA_SCHEMA}} --name $(date +%Y%m%d%H%M%S)

  dev:prisma:seed:
    desc: Seed the database
    deps: [prisma:generate]
    cmds:
      - pnpm prisma db seed

  dev:prisma:studio:
    desc: Start Prisma Studio
    watch: true
    sources:
      - prisma/schema.prisma
    cmds:
      - pnpm prisma studio --schema={{.PRISMA_SCHEMA}} --browser none

  dev:storybook:
    desc: Start Storybook development server
    cmds:
      - pnpm storybook dev --quiet --port=6006 --no-open | grep -v -iE 'info|warn' | grep -v '^$'

  docker:build:
    desc: Build Docker images
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} build --parallel

  docker:clean:
    desc: Clean Docker volumes
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} down -v

  docker:dev:
    desc: Start development Docker environment
    deps: [docker:build]
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} up app_dev

  docker:down:
    desc: Stop Docker containers
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} down

  docker:prod:
    desc: Start production Docker environment
    deps: [docker:build]
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} up app_prod

  docker:prod:rebuild:
    desc: Rebuild production Docker image
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} build app_prod --parallel

  docker:prod:redeploy:
    desc: Rebuild and restart production container
    deps: [docker:prod:rebuild]
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} up -d --no-deps app_prod

  docker:prune:
    desc: Prune Docker system
    cmds:
      - docker system prune -af --volumes

  t:
    desc: Alias for test
    cmds:
      - task: test:all

  test:all:
    desc: Run all tests in parallel
    cmds:
      - task -p test:unit test:e2e test:storybook

  test:sequential:
    desc: Run all tests sequentially
    cmds:
      - task: test:unit
      - task: test:e2e
      - task: test:storybook

  test:unit:
    desc: Run unit tests
    cmds:
      - pnpm vitest run --config={{.VITEST_CONFIG}}

  test:e2e:
    desc: Run E2E tests against prod environment
    cmds:
      - BASE_URL={{.PROD_DEV_DOMAIN}} E2E_TESTING_SECRET={{.E2E_TESTING_SECRET_PROD}} pnpm playwright test --config={{.E2E_CONFIG}}

  test:e2e:ci:
    desc: Run E2E tests in CI
    cmds:
      - pnpm playwright test --config={{.E2E_CONFIG}}

  test:e2e:dev:
    desc: Run E2E tests against dev environment
    cmds:
      - BASE_URL={{.DEVELOPMENT_DOMAIN}} E2E_TESTING_SECRET={{.E2E_TESTING_SECRET_DEV}} pnpm playwright test --config={{.E2E_CONFIG}}

  test:e2e:prod:
    desc: Run E2E tests against production
    cmds:
      - BASE_URL={{.PRODUCTION_DOMAIN}} pnpm playwright test --config={{.E2E_CONFIG}}

  test:e2e:docker:
    desc: Run E2E tests in Docker
    cmds:
      - docker compose -f {{.DOCKER_COMPOSE}} up playwright
      - pnpm playwright show-report .next/playwright-report/html

  test:storybook:
    desc: Run Storybook tests
    cmds:
      - pnpm playwright test --config={{.STORYBOOK_CONFIG}}

  test:storybook:update:
    desc: Update Storybook test snapshots
    cmds:
      - pnpm playwright test --config={{.STORYBOOK_CONFIG}} --update-snapshots

  test:storybook:docker:
    desc: Run Storybook tests in Docker
    cmds:
      - docker compose -f {{.DOCKER_COMPOSE}} up storybook-test
      - pnpm playwright show-report .next/storybook-report/html

  fix:
    desc: Fix all code issues in parallel
    cmds:
      - task -p lint:fix format

  format:
    desc: Format code
    cmds:
      - pnpm prettier -w {{.NON_ESLINT_FILES}}

  format:check:
    desc: Check code formatting
    cmds:
      - pnpm prettier -c {{.NON_ESLINT_FILES}}

  lint:
    desc: Lint code
    cmds:
      - pnpm eslint --config={{.ESLINT_CONFIG}}

  lint:fix:
    desc: Fix linting issues
    cmds:
      - pnpm eslint --config={{.ESLINT_CONFIG}} --fix

  lint:strict:
    desc: Lint code with strict rules
    cmds:
      - pnpm eslint --max-warnings=0 --config={{.ESLINT_CONFIG}}

  cdk:
    desc: AWS CDK related tasks
    deps: [cdk:preflight]
    cmds:
      - task: cdk:deploy

  cdk:deploy:
    desc: Deploy CDK stack
    cmds:
      - pnpm cdk deploy

  cdk:deploy:resources:
    desc: Deploy all CDK resources
    deps: [cdk:validate-deployer]
    cmds:
      - pnpm cdk deploy --all

  cdk:deployer:create:
    desc: Create CDK deployer
    cmds:
      - pnpm tsx {{.CDK_SCRIPTS}}/create-deployer.ts

  cdk:destroy:
    desc: Destroy CDK stack
    cmds:
      - pnpm cdk destroy --all

  cdk:diff:
    desc: Show CDK diff
    cmds:
      - pnpm cdk diff

  cdk:preflight:
    desc: Run CDK preflight checks
    cmds:
      - pnpm tsx {{.CDK_SCRIPTS}}/preflight.ts

  cdk:env:
    desc: Print CDK deployment values
    cmds:
      - pnpm tsx {{.CDK_SCRIPTS}}/print-deployment-values.ts

  cdk:synth:
    desc: Synthesize CDK app
    cmds:
      - pnpm cdk synth

  cdk:wait:
    desc: Wait for CDK resources
    cmds:
      - pnpm tsx {{.CDK_SCRIPTS}}/wait-for-ready.ts

  setup:local:
    desc: Setup local development environment
    cmds:
      - pnpm tsx {{.SCRIPTS}}/setup-local-dev.ts

  start:
    desc: Start the application
    deps: [vercel:env:pull, setup:local]
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} up --build

  typecheck:
    desc: Run TypeScript type checking
    deps: [prisma:generate]
    cmds:
      - pnpm tsc --noEmit --incremental false

  prisma:generate:
    desc: Generate Prisma client
    cmds:
      - pnpm prisma generate --schema={{.PRISMA_SCHEMA}} --no-hints

  prisma:migrate:
    desc: Run Prisma migrations
    cmds:
      - pnpm prisma migrate deploy --schema={{.PRISMA_SCHEMA}}

  prisma:watch:
    desc: Watch Prisma schema changes
    watch: true
    sources:
      - prisma/schema.prisma
    cmds:
      - pnpm prisma generate --schema={{.PRISMA_SCHEMA}} --no-hints

  update-packages:
    desc: Update npm packages
    cmds:
      - pnpm tsx {{.SCRIPTS}}/update-packages.ts 
  
  vercel:deploy:
    desc: Deploy to Vercel
    cmds:
      - pnpm vercel deploy

  vercel:deploy:prod:
    desc: Deploy to Vercel production
    cmds:
      - pnpm vercel deploy --target production --logs

  vercel:deploy:preview:
    desc: Deploy to Vercel preview
    cmds:
      - pnpm vercel deploy --target preview --logs
  
  vercel:env:pull:
    desc: Pull Vercel environment variables
    cmds:
      - pnpm vercel env pull

  cdk:validate-deployer:
    desc: Validate CDK deployer configuration
    cmds:
      - pnpm tsx {{.CDK_SCRIPTS}}/validate-deployer.ts
