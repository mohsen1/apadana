version: "3"

vars:
  PRODUCTION_DOMAIN: https://www.apadana.app
  DEVELOPMENT_DOMAIN: https://dev.apadana.local
  PROD_DEV_DOMAIN: https://prod.apadana.local
  PRISMA_SCHEMA: src/prisma/schema.prisma
  DOCKER_COMPOSE: src/docker/docker-compose.yml
  VITEST_CONFIG: config/vitest.config.ts
  STORYBOOK_CONFIG: config/playwright.storybook.config.ts
  E2E_CONFIG: src/e2e/playwright.config.ts
  E2E_TESTING_SECRET_DEV: e2e_testing_secret_for_dev
  E2E_TESTING_SECRET_PROD: e2e_testing_secret_for_prod
  NON_ESLINT_FILES: "**/*.{json,css,md,webmanifest,yml,yaml}"
  ESLINT_FILES: "**/*.{js,jsx,ts,tsx,mjs}"
  ESLINT_CONFIG: config/eslint.config.mjs
  CDK_SCRIPTS: src/aws-setup/scripts
  SCRIPTS: src/scripts
  AWS_DEPLOYMENT_CONCURRENCY: 30
  # Standardized environment names
  ENV:
    sh: echo "${VERCEL_ENV:-${AWS_DEPLOYMENT_STACK_ENV:-development}}"

env:
  DOCKER_BUILDKIT: "1"
  COMPOSE_DOCKER_CLI_BUILD: "1"
  AVOID_UPDATE_NOTIFIER: "1"
  NODE_OPTIONS: --no-warnings
  # Export standardized environment
  AWS_DEPLOYMENT_STACK_ENV:
    sh: echo ${ENV}

tasks:
  i:
    desc: Alias for install
    silent: true
    cmds:
      - task: install
  install:
    desc: Install dependencies
    silent: true
    cmds:
      - pnpm install --prefer-offline

  fetch:
    desc: Fetch dependencies
    silent: true
    cmds:
      - pnpm fetch

  build:
    desc: Build the application
    deps: [prisma:generate]
    silent: true
    cmds:
      - pnpm next build {{.CLI_ARGS}}

  next:start:
    desc: Start Next.js production server
    silent: true
    cmds:
      - pnpm next start {{.CLI_ARGS}}

  dev:
    desc: Start development environment
    deps: [prisma:generate, prisma:migrate]
    silent: true
    cmds:
      - task: dev:all:parallel

  dev:all:parallel:
    internal: true
    silent: true
    cmds:
      - pnpm concurrently "task dev:next" "task dev:prisma" "task dev:storybook"

  dev:next:
    desc: Start Next.js development server
    silent: true
    cmds:
      - pnpm next dev --turbo {{.CLI_ARGS}}

  dev:prisma:
    desc: Watch Prisma schema changes
    silent: true
    cmds:
      - pnpm prisma generate --schema={{.PRISMA_SCHEMA}} --no-hints --watch

  dev:prisma:migrate:
    desc: Run Prisma migrations
    silent: true
    cmds:
      - pnpm prisma migrate dev --schema={{.PRISMA_SCHEMA}} --name $(date +%Y%m%d%H%M%S) {{.CLI_ARGS}}

  dev:prisma:seed:
    desc: Seed the database
    deps: [prisma:generate]
    silent: true
    cmds:
      - pnpm prisma db seed

  dev:prisma:studio:
    desc: Start Prisma Studio
    watch: true
    silent: true
    sources:
      - "{{.PRISMA_SCHEMA}}"
    cmds:
      - pnpm prisma studio --schema={{.PRISMA_SCHEMA}} --browser none {{.CLI_ARGS}}

  dev:storybook:
    desc: Start Storybook development server
    silent: true
    cmds:
      - pnpm storybook dev --quiet --port=6006 --no-open {{.CLI_ARGS}} | grep -v -iE 'info|warn' | grep -v '^$'

  docker:build:
    desc: Build Docker images
    silent: true
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} build --parallel {{.CLI_ARGS}}

  docker:clean:
    desc: Clean Docker volumes
    silent: true
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} down -v

  docker:dev:
    desc: Start development Docker environment
    deps: [docker:build]
    silent: true
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} up app_dev

  docker:down:
    desc: Stop Docker containers
    silent: true
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} down

  docker:prod:
    desc: Start production Docker environment
    deps: [docker:build]
    silent: true
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} up app_prod

  docker:prod:rebuild:
    desc: Rebuild production Docker image
    silent: true
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} build app_prod --parallel

  docker:prod:redeploy:
    desc: Rebuild and restart production container
    deps: [docker:prod:rebuild]
    silent: true
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} up -d --no-deps app_prod

  docker:prune:
    desc: Prune Docker system
    silent: true
    cmds:
      - docker system prune -af --volumes

  t:
    desc: Alias for tests and linters
    silent: true
    cmds:
      - task: typecheck
      - task: fix
      - task: test:all

  push:
    desc: |
      Push to remote. This will run all tests and if they fail, it will not push.
      This is useful for running tests before pushing to remote.
      While this is running you can switch to another branch start new work
    silent: true
    env:
      COMPOSE_PROJECT_NAME: ci
    cmds:
      - "{{.SCRIPTS}}/push.sh"

  local-ci:run:
    desc: Run all tests in local CI
    silent: true
    cmds:
      - task typecheck && task fix && task test:unit && task test:e2e:docker:run && task test:storybook:docker

  test:all:
    desc: Run all tests in parallel
    silent: true
    cmds:
      - task: test:unit
      - task: test:e2e:docker:run
      - task: test:storybook:docker

  test:sequential:
    desc: Run all tests sequentially
    silent: true
    cmds:
      - task: test:unit
      - task: test:e2e
      - task: test:storybook

  test:unit:
    desc: Run unit tests
    silent: true
    cmds:
      - pnpm vitest run --config={{.VITEST_CONFIG}} {{.CLI_ARGS}}

  test:e2e:
    desc: Run E2E tests against prod environment
    deps: [nextjs:check:health:prod]
    silent: true
    env:
      E2E_TESTING_SECRET: "{{.E2E_TESTING_SECRET_PROD}}"
      BASE_URL: "{{.PROD_DEV_DOMAIN}}"
    cmds:
      - pnpm playwright test --config={{.E2E_CONFIG}} {{.CLI_ARGS}}

  test:e2e:ci:
    desc: Run E2E tests in CI
    silent: true
    cmds:
      - pnpm playwright test --config={{.E2E_CONFIG}} {{.CLI_ARGS}}

  test:e2e:dev:
    desc: Run E2E tests against dev environment
    silent: true
    env:
      E2E_TESTING_SECRET: "{{.E2E_TESTING_SECRET_DEV}}"
      BASE_URL: "{{.DEVELOPMENT_DOMAIN}}"
    cmds:
      - pnpm playwright test --config={{.E2E_CONFIG}} {{.CLI_ARGS}}

  test:e2e:prod:
    desc: Run E2E tests against production
    silent: true
    env:
      BASE_URL: "{{.PRODUCTION_DOMAIN}}"
    cmds:
      - pnpm playwright test --config={{.E2E_CONFIG}} {{.CLI_ARGS}}

  test:e2e:docker:run:
    desc: Run E2E tests in Docker
    silent: true
    cmds:
      - docker compose -f {{.DOCKER_COMPOSE}} up playwright {{.CLI_ARGS}}

  test:e2e:docker:
    desc: Run E2E tests in Docker
    deps:
      - task: test:e2e:docker:run
    prompt: Do you want to open the HTML report?
    silent: true
    cmds:
      - pnpm playwright show-report .next/playwright-report/html

  test:storybook:
    desc: Run Storybook tests
    silent: true
    cmds:
      - pnpm playwright test --config={{.STORYBOOK_CONFIG}} {{.CLI_ARGS}}

  test:storybook:update:
    desc: Update Storybook test snapshots
    silent: true
    cmds:
      - pnpm playwright test --config={{.STORYBOOK_CONFIG}} --update-snapshots

  test:storybook:docker:run:
    desc: Run Storybook tests in Docker
    silent: true
    cmds:
      - docker compose -f {{.DOCKER_COMPOSE}} up storybook-test

  test:storybook:docker:
    desc: Run Storybook tests in Docker
    silent: true
    cmds:
      - task: test:storybook:docker:run
      - pnpm playwright show-report .next/storybook-report/html

  test:storybook:docker:update:
    desc: Run Storybook tests in Docker and update snapshots
    env:
      UPDATE_SNAPSHOTS: true
    silent: true
    cmds:
      - docker compose -f {{.DOCKER_COMPOSE}} up storybook-test
      - pnpm playwright show-report .next/storybook-report/html

  fix:
    desc: Fix all code issues in parallel
    silent: true
    cmds:
      - task -p lint:fix format

  format:
    desc: Format code
    silent: true
    cmds:
      - pnpm prettier -w {{.NON_ESLINT_FILES}}

  format:check:
    desc: Check code formatting
    silent: true
    cmds:
      - pnpm prettier -c {{.NON_ESLINT_FILES}}

  lint:
    desc: Lint code
    silent: true
    cmds:
      - pnpm eslint --config={{.ESLINT_CONFIG}} {{.CLI_ARGS}}

  lint:fix:
    desc: Fix linting issues
    silent: true
    cmds:
      - pnpm eslint --config={{.ESLINT_CONFIG}} --fix {{.CLI_ARGS}}

  lint:strict:
    desc: Lint code with strict rules
    silent: true
    cmds:
      - pnpm eslint --max-warnings=0 --config={{.ESLINT_CONFIG}} {{.CLI_ARGS}}

  cdk:
    desc: AWS CDK related tasks
    deps: [cdk:preflight]
    silent: true
    cmds:
      - task: cdk:deploy

  cdk:deploy:
    desc: Deploy a specific stack to AWS
    silent: true
    cmds:
      - pnpm cdk deploy {{.CLI_ARGS}}

  cdk:deploy-ci:
    desc: Deploy CDK stack in CI. This will not ask for approval and will deploy all resources.
    silent: true
    cmds:
      - pnpm cdk deploy --all --require-approval never --concurrency {{.AWS_DEPLOYMENT_CONCURRENCY}} {{.CLI_ARGS}}

  cdk:deploy:prod:
    desc: Deploy CDK stack in production
    env:
      AWS_DEPLOYMENT_STACK_ENV: production
      AWS_PROFILE: ap-deployer-production
    silent: true
    cmds:
      - pnpm cdk deploy --all --concurrency {{.AWS_DEPLOYMENT_CONCURRENCY}} {{.CLI_ARGS}} --require-approval never

  cdk:deploy:preview:
    desc: Deploy CDK stack in preview
    env:
      AWS_DEPLOYMENT_STACK_ENV: preview
      AWS_PROFILE: ap-deployer-preview
    silent: true
    cmds:
      - pnpm cdk deploy --all --concurrency {{.AWS_DEPLOYMENT_CONCURRENCY}} {{.CLI_ARGS}} --require-approval never

  cdk:deploy:dev:
    desc: Deploy CDK stack in development
    env:
      AWS_DEPLOYMENT_STACK_ENV: development
      AWS_PROFILE: ap-deployer-development
    silent: true
    cmds:
      - pnpm cdk deploy --all --concurrency {{.AWS_DEPLOYMENT_CONCURRENCY}} {{.CLI_ARGS}} --require-approval never

  cdk:deployer:create:
    desc: Create CDK deployer
    silent: true
    cmds:
      - pnpm tsx {{.CDK_SCRIPTS}}/create-deployer.ts

  cdk:deployer:create:add-to-vercel:
    desc: Add CDK deployer to Vercel
    silent: true
    cmds:
      - pnpm tsx {{.CDK_SCRIPTS}}/create-deployer.ts --add-to-vercel

  cdk:destroy:
    desc: Destroy CDK stack
    silent: true
    cmds:
      - pnpm cdk destroy --all {{.CLI_ARGS}}

  cdk:diff:
    desc: Show CDK diff
    silent: true
    cmds:
      - pnpm cdk diff {{.CLI_ARGS}}

  cdk:preflight:
    desc: Run CDK preflight checks
    silent: true
    cmds:
      - pnpm tsx {{.CDK_SCRIPTS}}/preflight.ts

  cdk:env:
    desc: Print CDK deployment values
    silent: true
    cmds:
      - pnpm tsx {{.CDK_SCRIPTS}}/print-deployment-values.ts

  cdk:synth:
    desc: Synthesize CDK app
    silent: true
    cmds:
      - pnpm cdk synth

  cdk:wait:
    desc: Wait for CDK resources
    silent: true
    cmds:
      - pnpm tsx {{.CDK_SCRIPTS}}/wait-for-ready.ts

  setup:local:
    desc: Setup local development environment
    silent: true
    cmds:
      - pnpm tsx {{.SCRIPTS}}/setup-local-dev.ts

  start:
    desc: Start the application
    deps: [vercel:env:pull, setup:local]
    silent: true
    cmds:
      - docker-compose -f {{.DOCKER_COMPOSE}} up --build

  typecheck:
    desc: Run TypeScript type checking
    deps: [prisma:generate]
    silent: true
    cmds:
      - pnpm tsc --noEmit --incremental false {{.CLI_ARGS}}

  prisma:generate:
    desc: Generate Prisma client
    silent: true
    cmds:
      - pnpm prisma generate --schema={{.PRISMA_SCHEMA}} --no-hints {{.CLI_ARGS}}

  prisma:migrate:
    desc: Run Prisma migrations
    silent: true
    cmds:
      - pnpm prisma migrate deploy --schema={{.PRISMA_SCHEMA}} {{.CLI_ARGS}}

  prisma:watch:
    desc: Watch Prisma schema changes
    watch: true
    silent: true
    sources:
      - prisma/schema.prisma
    cmds:
      - pnpm prisma generate --schema={{.PRISMA_SCHEMA}} --no-hints

  update-packages:
    desc: Update npm packages
    silent: true
    cmds:
      - pnpm tsx {{.SCRIPTS}}/update-packages.ts

  vercel:deploy:
    desc: Deploy to Vercel
    silent: true
    cmds:
      - pnpm vercel deploy {{.CLI_ARGS}}

  vercel:deploy:prod:
    desc: Deploy to Vercel production
    silent: true
    cmds:
      - pnpm vercel deploy --target production --logs {{.CLI_ARGS}}

  vercel:deploy:preview:
    desc: Deploy to Vercel preview
    silent: true
    cmds:
      - pnpm vercel deploy --target preview --logs {{.CLI_ARGS}}

  vercel:env:pull:
    desc: Pull Vercel environment variables
    silent: true
    cmds:
      - pnpm vercel env pull

  cdk:validate-deployer:
    desc: Validate CDK deployer configuration
    silent: true
    cmds:
      - pnpm tsx {{.CDK_SCRIPTS}}/validate-deployer.ts

  nextjs:check:health:prod:
    desc: Check if Dockerized production environment is healthy
    silent: true
    cmds:
      - |
        if curl -s {{.PROD_DEV_DOMAIN}}/api/health | grep -q "healthy"; then
          exit 0
        fi
        echo "Production environment is not healthy"
        exit 1
  serialize-repo:
    desc: Serialize the repository. Provide a path to a file to serialize to using -- --path=<path>
    silent: true
    cmds:
      - pnpm tsx {{.SCRIPTS}}/serialize-repo.ts {{.CLI_ARGS}}
