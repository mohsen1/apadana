// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Permission {
  // org:listing:manage
  MANAGE_LISTINGS

  // Clerk standard permissions from here:
  // https://clerk.com/docs/organizations/create-roles-permissions
  // org:member:manage
  READ_MEMBERS
  // org:billing:manage
  MANAGE_BILLING
  // org:reports:view
  VIEW_REPORTS
  // org:settings:edit
  EDIT_SETTINGS
  // org:domains:manage
  MANAGE_DOMAINS
  // org:organization:manage
  MANAGE_ORGANIZATION
  // org:organization:delete
  DELETE_ORGANIZATION
  // org:members:manage
  MANAGE_MEMBERS
  // org:user:manage
  MANAGE_USERS
  // org:role:manage
  MANAGE_ROLES
  // org:permission:manage
  MANAGE_PERMISSIONS
}

enum Role {
  // org:adm
  ADMIN
  // org:host
  HOST
  // org:cohost
  COHOST
  // org:guest
  GUEST
}

model UserRole {
  id     Int    @id @default(autoincrement())
  role   Role
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, role])
}

model UserPermission {
  id         Int        @id @default(autoincrement())
  permission Permission
  userId     String
  user       User       @relation(fields: [userId], references: [id])

  @@unique([userId, permission])
}

model User {
  id        String   @id // ID from Clerk
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailAddresses   EmailAddress[]
  externalAccounts ExternalAccount[]
  listings         Listing[]
  roles            UserRole[]
  permissions      UserPermission[]
}

model EmailAddress {
  id           String  @id
  emailAddress String  @unique
  isPrimary    Boolean @default(false)
  verification String?
  userId       String
  user         User    @relation(fields: [userId], references: [id])
}

model ExternalAccount {
  id         String @id
  provider   String
  externalId String
  userId     String
  user       User   @relation(fields: [userId], references: [id])

  @@unique([provider, externalId])
}

model Listing {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  propertyType  String
  address       String
  city          String
  state         String
  zipCode       String
  amenities     String[]
  pricePerNight Float
  minimumStay   Int
  maximumGuests Int
  houseRules    String
  published     Boolean  @default(false)
  owner         User     @relation(fields: [ownerId], references: [id])
  ownerId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
