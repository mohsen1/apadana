// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// TODO
// generator zod {
//   provider = "prisma-zod-generator"
//   output   = "../src/lib/prisma/generated"
// }

enum Permission {
  // org:listing:manage
  MANAGE_LISTINGS

  // Clerk standard permissions from here:
  // https://clerk.com/docs/organizations/create-roles-permissions
  // org:member:manage
  READ_MEMBERS
  // org:billing:manage
  MANAGE_BILLING
  // org:reports:view
  VIEW_REPORTS
  // org:settings:edit
  EDIT_SETTINGS
  // org:domains:manage
  MANAGE_DOMAINS
  // org:organization:manage
  MANAGE_ORGANIZATION
  // org:organization:delete
  DELETE_ORGANIZATION
  // org:members:manage
  MANAGE_MEMBERS
  // org:user:manage
  MANAGE_USERS
  // org:role:manage
  MANAGE_ROLES
  // org:permission:manage
  MANAGE_PERMISSIONS
}

enum Role {
  // org:admin
  ADMIN
  // org:user -- all users are hosts
  HOST
  // org:cohost
  COHOST
  // org:guest
  GUEST
}

model UserRole {
  id     Int    @id @default(autoincrement())
  role   Role
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, role])
}

model UserPermission {
  id         Int        @id @default(autoincrement())
  permission Permission
  userId     String
  user       User       @relation(fields: [userId], references: [id])

  @@unique([userId, permission])
}

model User {
  id        String   @id // ID from Clerk
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailAddresses   EmailAddress[]
  externalAccounts ExternalAccount[]
  listings         Listing[]
  roles            UserRole[]
  permissions      UserPermission[]
  bookings         Booking[]
}

model EmailAddress {
  id           String  @id
  emailAddress String  @unique
  isPrimary    Boolean @default(false)
  verification String?
  userId       String
  user         User    @relation(fields: [userId], references: [id])
}

model ExternalAccount {
  id         String @id
  provider   String
  externalId String
  userId     String
  user       User   @relation(fields: [userId], references: [id])

  @@unique([provider, externalId])
}

model UploadThingImage {
  id        String   @id @default(cuid())
  url       String
  key       String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing   Listing @relation(fields: [listingId], references: [id])
  listingId Int
}

model Listing {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(255)
  description      String             @db.Text
  propertyType     String             @db.VarChar(100)
  address          String             @db.VarChar(255)
  city             String             @db.VarChar(100)
  state            String             @db.VarChar(100)
  zipCode          String             @db.Char(5)
  timeZone         String             @db.VarChar(100)
  amenities        String[]
  pricePerNight    Float
  minimumStay      Int                @default(1)
  maximumGuests    Int                @default(5)
  houseRules       String             @db.Text
  published        Boolean            @default(false)
  owner            User               @relation(fields: [ownerId], references: [id])
  ownerId          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  images           UploadThingImage[]
  ListingInventory ListingInventory[]

  @@index([ownerId])
  @@index([city, state])
  @@index([pricePerNight])
}

model ListingInventory {
  id        Int      @id @default(autoincrement())
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId Int
  date      DateTime
  isBooked  Boolean  @default(false)
  price     Float
  booking   Booking? @relation(fields: [bookingId], references: [id])
  bookingId Int?

  @@unique([listingId, date])
  @@index([date])
  @@index([bookingId])
}

model Booking {
  id               Int                @id @default(autoincrement())
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  listingInventory ListingInventory[]
  totalPrice       Float
  checkIn          DateTime
  checkOut         DateTime
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([checkIn, checkOut])
}
