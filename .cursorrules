General
• Production URL: https://www.apadana.app
• Local Development URLs: https://dev.apadana.localhost and https://prod.apadana.loc.apadana.localhost
• Package manager: pnpm
• Use single quotes for strings whenever possible
• IMPORTANT: Try not to delete existing code unless absolutely certain it's not needed

Directory Structure
• src/app - App Router and API routes
• src/components - Shared components
• src/components/ui - ShadCDN UI components
• src/components/emails - Email templates
• src/hooks - Custom hooks
• src/lib - Non-route handlers
• src/utils - Utility functions
• src/prisma/schema - Prisma schema and seed
• config/ - Configuration files
• src/docker/ - Docker configuration
• AVOID creating new root directories

TypeScript Guidelines
• Use modern syntax: optional chaining, nullish coalescing, # for private fields, async iterators
• Use assertError for error assertions in catch blocks
• Prefer # private fields over private keyword
• Run pnpm typecheck before completing tasks

JavaScript Guidelines
• Prefer import \_ from 'lodash' over destructuring

Frontend Guidelines
• Use latest stable versions of Next.js, React, Node.js, ShadCDN UI, Tailwind CSS, Prisma, Lucide icons
• Use tailwind.config.ts for theme colors (Gray, Red, Yellow, Green, Blue, Indigo, Purple, Pink)
• Always handle dark mode in components
• Use ShadCDN UI's Button component for links
• Component stories go next to components (not in global stories folder)
• Use date-fns for date operations

Backend Guidelines
• Backend code lives in src/app/api
• Use SafeAction from @/lib/safe-action with next-safe-action
• Use Zod for input/output validation
• Use Prisma Client: import prisma from '@/lib/prisma/client'
• Use React-Hook-Form for forms
• Use Resend + React-Email + Tailwind CSS + clsx for emails
• Import model schemas from src/prisma/schema.ts or src/prisma/zod/index.ts
• Use argon2 for hashing
• Access env vars directly from process.env
• Email addresses: bookings@apadana.app, onboarding@apadana.app, support@apadana.app
• Use logger from @/utils/logger for logging (default export)

Action Signature
• Use next-safe-action:
actionClient.schema(input).action(async ({ parsedInput, ctx }) => {
// ...
});

Testing Guidelines
• Unit tests: Use Vitest, run in docker with database
• E2E tests: Use Playwright
• Use @example.com for test emails
• Import { test, expect } from 'base'
• Create test data with TestData class
• Avoid page.waitForTimeout(1000)

Development & Deployment
• Run everything except e2e tests in docker
• Commit all changes before deploying to Vercel
• Use Taskfile to run commands

Git
• commit changes carefully with multiple commits, each commit semantically meaningful
• pipe git diff to cat to see what's changed
• never `git add .`. Add files individually.
• IMPORTANT: NEVER chain commit command to git add with git add ... && git commit
• use multiple -m flags for multi-line commit messages:
git commit -m 'type: title' -m '' -m '- bullet point 1' -m '- bullet point 2'
First -m for title, second -m for empty line, rest for bullet points

Deployment
• Always commit changes before deploying to Vercel
