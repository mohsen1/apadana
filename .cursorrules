General
• Production URL: https://apadana.app
• Sender Emails: bookings@apadana.app, onboarding@apadana.app, support@apadana.app
• Use logger (default export from @/utils/logger) for logging
• Utilities in src/utils
• Non-route handlers in src/lib
• Package manager: pnpm
• Unit testing: Vitest
• Date operations: date-fns
• Prefer import \_ from 'lodash' over destructuring
• Prisma schema/seed in src/prisma/schema
• Don’t create new root directories
• Component stories go next to components, never in a global stories folder
• Create a story for every email and visual component
• Use argon2 for hashing
• Send emails via sendEmail function in send-email.ts
• All emails must use EmailLayout component
• Check package.json for available pnpm commands
• Minimize global variables.
• Keep files short.
• Avoid inline styling, prefer tailwind classes
• Validate every user input with Zod.
• Cache frequently accessed data.
• Group related utilities under src/utils.
• Store secrets only in .env
• Use logger in place of console logs. use createLogger from @/utils/logger
• Write e2e tests for critical paths.
• Commit often with short, meaningful messages.
• Avoid mixing data fetching and rendering in the same file.

TypeScript
• Use assertError for error assertions
• Modern syntax: optional chaining, nullish coalescing, # for private fields, async iterators, etc.
• In catch blocks, call assertError
• Avoid private in favor of #

Next.js
• Use the latest stable versions of Next.js, TypeScript, React, Node.js, ShadCDN UI, Tailwind CSS, Prisma, and Lucide icons
• Rely on tailwind.config.ts for theme colors
• Use the App Router from src
• Don’t create new folders under src/app unless it’s a route
• Shared components in src/components; ShadCDN UI components in src/components/ui
• Hooks in src/hooks; emails in src/components/emails
• Theme-defined colors: Gray, Red, Yellow, Green, Blue, Indigo, Purple, Pink
• Always handle dark mode in components
• Use ShadCDN UI’s Button for links

Backend
• All backend code lives in src/app/api
• Use SafeAction from @/lib/safe-action
• Validate input/output with Zod
• Use Prisma (import prisma from '@/lib/prisma/client')
• For forms, use React-Hook-Form with next-safe-action
• Resend + React-Email + Tailwind CSS + clsx for emails
• Refer to src/prisma/schema.prisma for DB structure
• Import model schemas from src/prisma/schema.ts or src/prisma/zod/index.ts
• No NextAuth; retrieve server user via getUserInServer
• No react-query; query data from Prisma in backend
• Access env vars directly from process.env

Action Signature
• We use [Next Safe Action](https://next-safe-action.dev/docs/getting-started)

actionClient.schema(input).action(async ({ parsedInput, ctx }) => {

E2E Testing
• Use Playwright with import { test, expect } from 'base'
• Create test data with TestData class
• Destructure test data in tests:

test('sample test', async ({ page, data }) => {
