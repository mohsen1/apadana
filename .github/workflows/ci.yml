name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches: ['main']
  deployment_status:

permissions:
  contents: write
  pull-requests: write
  actions: read
  checks: write
  deployments: read
  statuses: read

jobs:
  validate:
    if: github.event_name != 'deployment_status'
    name: ${{ matrix.task.name }}
    runs-on: macos-14
    timeout-minutes: 10
    strategy:
      fail-fast: true
      matrix:
        task:
          - name: Lint
            run: pnpm run lint:strict
          - name: Type check
            run: pnpm run typecheck
          - name: Format check
            run: pnpm run format:check
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}

  test:
    if: github.event_name != 'deployment_status'
    name: Run Vitest
    runs-on: ubuntu-24.04
    needs: [validate]
    timeout-minutes: 10
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: apadana_test_ci
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - run: touch .env.local
      - uses: docker/setup-buildx-action@v3
      - run: pnpm run test
        env:
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/apadana_test_ci'
          TEST_ENV: 'unit'

  fix-and-commit:
    name: Fix and commit code style
    needs: [validate]
    runs-on: ubuntu-24.04
    if: |
      github.event_name == 'pull_request' && 
      needs.validate.result == 'failure'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - uses: ./.github/actions/setup
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout ${{ github.head_ref }}
      - run: pnpm run fix
      - name: Check for changes
        id: git-check
        run: |
          git diff --exit-code || echo "changes=true" >> $GITHUB_OUTPUT
      - if: steps.git-check.outputs.changes == 'true'
        run: |
          git add -A
          git commit -m "style: automatically fix code style issues"
          git push

  e2e:
    name: E2E
    needs: [test]
    runs-on: ubuntu-24.04
    if: |
      github.event_name == 'deployment_status' && 
      github.event.deployment_status.state == 'success'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - uses: ./.github/actions/playwright

      - name: Find PR number
        id: find-pr
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const commits = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner,
              repo,
              commit_sha: context.sha,
            });
            if (commits.data.length > 0) {
              core.setOutput('pr_number', commits.data[0].number);
            }

      - name: Install Playwright
        run: pnpm dlx playwright install

      - name: Run E2E Tests
        run: pnpm run e2e:ci

      - name: Update PR Comment for E2E
        if: always() && steps.find-pr.outputs.pr_number
        uses: ./.github/actions/update-pr-comment
        with:
          pr_number: ${{ steps.find-pr.outputs.pr_number }}
          test_status: ${{ steps.test-run.outcome }}
          report_url: ${{ steps.upload-results.outputs.object_locations && fromJSON(steps.upload-results.outputs.object_locations)[0] }}/index.html
          test_type: 'E2E'
          deployment_url: ${{ github.event.deployment_status.target_url }}

      - name: Run E2E Tests
        id: test-run
        run: pnpm run e2e:ci
        env:
          BASE_URL: ${{ github.event.deployment_status.target_url }}
          VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}
          E2E_TESTING_SECRET: ${{ secrets.E2E_TESTING_SECRET }}

      - name: Upload Test Report
        if: always() && hashFiles('.next/playwright-report/**') != ''
        id: upload-results
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_bucket: apadana-e2e
          source_dir: '.next/playwright-report'
          destination_dir: ${{ github.sha }}/e2e/html

  storybook:
    name: Storybook Screenshots
    needs: [test]
    runs-on: macos-14
    if: github.event_name != 'deployment_status'
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - uses: ./.github/actions/playwright

      - name: Find PR number
        id: find-pr
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const commits = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner,
              repo,
              commit_sha: context.sha,
            });
            if (commits.data.length > 0) {
              core.setOutput('pr_number', commits.data[0].number);
            }

      - run: pnpm dlx playwright install

      - name: Test Storybook
        id: test-run
        run: pnpm run test:storybook

      - name: Upload Storybook Results
        if: always() && hashFiles('storybook-e2e-html-report/**') != ''
        id: upload-results
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_bucket: apadana-e2e
          source_dir: 'storybook-e2e-html-report'
          destination_dir: ${{ github.sha }}/storybook/html

      - name: Update PR Comment for Storybook
        if: always() && steps.find-pr.outputs.pr_number
        uses: ./.github/actions/update-pr-comment
        with:
          pr_number: ${{ steps.find-pr.outputs.pr_number }}
          test_status: ${{ steps.test-run.outcome }}
          report_url: ${{ fromJSON(steps.upload-results.outputs.object_locations)[0] }}/index.html
          test_type: 'Storybook'
