name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches: ['main']

permissions:
  contents: write
  pull-requests: write
  actions: read
  checks: write
  deployments: read
  statuses: read

jobs:
  validate:
    if: github.event_name != 'deployment_status'
    name: Validate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .next/cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Run checks
        run: |
          # Run all checks in parallel and capture their exit codes
          echo "Running lint..."
          pnpm run lint:strict > lint.log 2>&1 & lint_pid=$!
          echo "Running typecheck..."
          pnpm run typecheck > typecheck.log 2>&1 & typecheck_pid=$!
          echo "Running format check..."
          pnpm run format:check > format.log 2>&1 & format_pid=$!

          # Wait for all processes and capture their exit codes
          wait $lint_pid && lint_status=$? || lint_status=$?
          wait $typecheck_pid && typecheck_status=$? || typecheck_status=$?
          wait $format_pid && format_status=$? || format_status=$?

          # Create summary table header
          echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | $([ $lint_status -eq 0 ] && echo "PASSED" || echo "FAILED") |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | $([ $typecheck_status -eq 0 ] && echo "PASSED" || echo "FAILED") |" >> $GITHUB_STEP_SUMMARY
          echo "| Format | $([ $format_status -eq 0 ] && echo "PASSED" || echo "FAILED") |" >> $GITHUB_STEP_SUMMARY

          # Show errors in console if any check failed
          [ $lint_status -eq 0 ] || cat lint.log
          [ $typecheck_status -eq 0 ] || cat typecheck.log
          [ $format_status -eq 0 ] || cat format.log

          # Exit with failure if any check failed
          [ $lint_status -eq 0 ] && [ $typecheck_status -eq 0 ] && [ $format_status -eq 0 ]

  test:
    if: github.event_name != 'deployment_status'
    name: Run Vitest
    runs-on: ubuntu-latest
    needs: [validate]
    timeout-minutes: 10
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: apadana_test_ci
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .next/cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - run: touch .env.local
      - uses: docker/setup-buildx-action@v3
      - run: pnpm run test
        env:
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/apadana_test_ci'
          TEST_ENV: 'unit'

  fix-and-commit:
    name: Fix and commit code style
    needs: [validate]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (failure() || success())
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      - uses: ./.github/actions/setup
      - uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .next/cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout ${{ github.head_ref }}
      - run: pnpm run fix
      - name: Check for changes
        id: git-check
        run: |
          git diff --exit-code || echo "changes=true" >> $GITHUB_OUTPUT
      - if: steps.git-check.outputs.changes == 'true'
        run: |
          git add -A
          git commit -m "style: automatically fix code style issues"
          git push
