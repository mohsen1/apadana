name: Playwright Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Run Playwright tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15 # Vercel Postgres is version 15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm install -g pnpm && pnpm install

      - name: Build
        run: pnpm run build

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Run Playwright tests
        run: pnpm exec playwright test
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_dmFsdWVkLWJhdC05OS5jbGVyay5hY2NvdW50cy5kZXYk
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          POSTGRES_URL_NO_SSL: postgresql://postgres:postgres@localhost:5432/postgres
          POSTGRES_URL_NON_POOLING: postgresql://postgres:postgres@localhost:5432/postgres
          POSTGRES_USER: postgres
          POSTGRES_HOST: localhost
          POSTGRES_PASSWORD: postgres
          POSTGRES_DATABASE: postgres

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      # Step to upload test results to UploadThing
      - name: Upload test results to UploadThing
        id: upload-results # Added ID to reference outputs
        env:
          UPLOADTHING_API_KEY: ${{ secrets.UPLOADTHING_API_KEY }}
        run: |
          # Install necessary tools
          sudo apt-get update
          sudo apt-get install -y jq

          # Change directory to test-results
          cd test-results

          # Find all files to upload
          mapfile -t FILES < <(find . -type f)

          # Prepare the files array for the API request
          FILES_JSON="[]"
          for FILE in "${FILES[@]}"; do
            SIZE=$(stat -c%s "$FILE")
            NAME=$(echo "$FILE" | sed 's|^\./||') # Remove leading ./
            FILE_ENTRY=$(jq -n --arg name "$NAME" --argjson size "$SIZE" '{name: $name, size: $size}')
            FILES_JSON=$(echo "$FILES_JSON" | jq --argjson file "$FILE_ENTRY" '. + [$file]')
          done

          # Call the prepareUpload endpoint to get presigned URLs
          RESPONSE=$(curl -s -X POST https://api.uploadthing.com/v6/prepareUpload \
            -H "x-uploadthing-api-key: $UPLOADTHING_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "callbackUrl": null,
              "callbackSlug": null,
              "files": '"$FILES_JSON"',
              "routeConfig": ["blob"]
            }')

          # Check if the response is valid
          if [ -z "$RESPONSE" ]; then
            echo "Failed to get presigned URLs"
            exit 1
          fi

          # Upload each file using the presigned URLs
          INDEX_FILE_URL=""

          echo "$RESPONSE" | jq -c '.[]' | while read -r FILE_INFO; do
            FILE_NAME=$(echo "$FILE_INFO" | jq -r '.fileName')
            UPLOAD_URL=$(echo "$FILE_INFO" | jq -r '.url')
            FIELDS=$(echo "$FILE_INFO" | jq -c '.fields')
            FILE_PATH="./$FILE_NAME"

            # Prepare form data for the upload
            FORM_DATA=""
            for FIELD_KEY in $(echo "$FIELDS" | jq -r 'keys[]'); do
              FIELD_VALUE=$(echo "$FIELDS" | jq -r --arg key "$FIELD_KEY" '.[$key]')
              FORM_DATA="$FORM_DATA -F \"$FIELD_KEY=$FIELD_VALUE\""
            done
            FORM_DATA="$FORM_DATA -F \"file=@$FILE_PATH\""

            # Evaluate the FORM_DATA string into actual parameters
            eval curl -s -X POST "$UPLOAD_URL" $FORM_DATA

            # Check if the file is index.html to generate the link later
            if [ "$FILE_NAME" = "index.html" ]; then
              INDEX_FILE_URL=$(echo "$FILE_INFO" | jq -r '.fileUrl')
            fi
          done

          # Output the link to index.html
          if [ -n "$INDEX_FILE_URL" ]; then
            echo "Index.html is available at: $INDEX_FILE_URL"
            # Set the URL as a step output
            echo "url=$INDEX_FILE_URL" >> $GITHUB_OUTPUT
          else
            echo "index.html not found or failed to upload."
            # Set an empty URL as a step output
            echo "url=" >> $GITHUB_OUTPUT
          fi

      # Step to add a custom check to the PR with the link
      - name: Add custom check with link
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const url = `${{ steps.upload-results.outputs.url }}`;
            const { owner, repo } = context.repo;
            const head_sha = context.payload.pull_request.head.sha;

            if (url) {
              await github.rest.checks.create({
                owner,
                repo,
                name: 'Playwright Test Report',
                head_sha,
                status: 'completed',
                conclusion: 'success',
                output: {
                  title: 'Playwright Test Report',
                  summary: `✅ [View the Playwright test report](${url})`,
                },
              });
            } else {
              await github.rest.checks.create({
                owner,
                repo,
                name: 'Playwright Test Report',
                head_sha,
                status: 'completed',
                conclusion: 'failure',
                output: {
                  title: 'Playwright Test Report',
                  summary: `❌ Playwright test report not available.`,
                },
              });
            }
