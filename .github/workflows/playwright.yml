name: Playwright Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Run Playwright tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15 # Vercel Postgres is version 15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm install -g pnpm && pnpm install

      - name: Build
        run: pnpm run build
        env:
          NEXT_E2E_BUILD: 'true'

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Run Playwright tests
        run: pnpm exec playwright test
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: pk_test_dmFsdWVkLWJhdC05OS5jbGVyay5hY2NvdW50cy5kZXYk
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          POSTGRES_URL_NO_SSL: postgresql://postgres:postgres@localhost:5432/postgres
          POSTGRES_URL_NON_POOLING: postgresql://postgres:postgres@localhost:5432/postgres
          POSTGRES_USER: postgres
          POSTGRES_HOST: localhost
          POSTGRES_PASSWORD: postgres
          POSTGRES_DATABASE: postgres

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload test results to UploadThing
        if: always()
        env:
          UPLOADTHING_TOKEN: ${{ secrets.UPLOADTHING_TOKEN }}
        run: node src/scripts/upload-directory.js test-results

      - name: Add a link to Playwright Test Report
        if: always()
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const url = `${{ steps.upload-results.outputs.url }}`;
            const { owner, repo } = context.repo;
            const head_sha = context.payload.pull_request.head.sha;

            if (url) {
              await github.rest.checks.create({
                owner,
                repo,
                name: 'Playwright Test Report',
                head_sha,
                status: 'completed',
                conclusion: 'success',
                output: {
                  title: 'Playwright Test Report',
                  summary: `✅ [View the Playwright test report](${url})`,
                },
              });
            } else {
              await github.rest.checks.create({
                owner,
                repo,
                name: 'Playwright Test Report',
                head_sha,
                status: 'completed',
                conclusion: 'failure',
                output: {
                  title: 'Playwright Test Report',
                  summary: `❌ Playwright test report not available.`,
                },
              });
            }
