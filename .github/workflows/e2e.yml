name: E2E

on:
  deployment_status:

permissions:
  contents: read
  pull-requests: write
  actions: read
  checks: write
  deployments: read
  statuses: read

jobs:
  run-e2es:
    name: Playwright
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    steps:
      - name: Check if Deployment is successful
        id: check-deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentStatus = await github.rest.repos.getDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              status_id: context.payload.deployment_status.id
            });

            core.setOutput('deployment_status', deploymentStatus.data.state);
            core.setOutput('deployment_url', deploymentStatus.data.target_url);

            if (deploymentStatus.data.state !== 'success') {
              throw new Error(`Deployment not successful. state: ${deploymentStatus.data.state}`);
            }

      - name: Check if CI workflow have succeeded
        id: check-workflows
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const workflowRuns = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: context.sha,
            });
            const ciRun = workflowRuns.data.workflow_runs.find(run => run.path === '.github/workflows/ci.yml');
              core.setOutput('ci_status', ciRun.conclusion);
              const failed = ciRun.conclusion !== 'success';
              if (failed) {
                console.log('CI workflow not successful for this SHA.');
                core.setOutput('skip', 'true');
              }
            } catch (error) {
              core.setOutput('skip', 'true');
            }

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Cache Playwright Browsers
        id: playwright-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          # Cache key based on Playwright version and OS
          key: playwright-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps

      - name: Run E2E Tests
        id: test-run
        run: pnpm run e2e:ci
        env:
          BASE_URL: ${{ steps.check-deployment.outputs.deployment_url }}
          VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}
      - name: Upload Playwright Test Report
        if: always() && hashFiles('test-results/**') != ''
        id: upload-results
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_bucket: apadana-e2e
          source_dir: test-results
          destination_dir: ${{ github.event.workflow_run.head_sha || github.sha }}

      - name: Set details link
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            core.setOutput('details_link', ${{ steps.upload-results.outputs.destination_url }});
