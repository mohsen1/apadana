name: E2E

on:
  deployment_status:

permissions:
  contents: read
  pull-requests: write
  actions: read
  checks: write
  deployments: read
  statuses: read

jobs:
  run-e2es:
    name: Playwright
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    steps:
      - name: Check if Deployment is successful
        id: check-deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentStatus = await github.rest.repos.getDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              status_id: context.payload.deployment_status.id
            });

            core.setOutput('deployment_status', deploymentStatus.data.state);
            core.setOutput('deployment_url', deploymentStatus.data.target_url);

            if (deploymentStatus.data.state !== 'success') {
              throw new Error(`Deployment not successful. state: ${deploymentStatus.data.state}`);
            }

      - name: Check if CI workflow have succeeded
        id: check-workflows
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const workflowRuns = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: context.sha,
            });
            const ciRun = workflowRuns.data.workflow_runs.find(run => run.path === '.github/workflows/ci.yml');
              core.setOutput('ci_status', ciRun.conclusion);
              const failed = ciRun.conclusion !== 'success';
              if (failed) {
                console.log('CI workflow not successful for this SHA.');
                core.setOutput('skip', 'true');
              }
            } catch (error) {
              core.setOutput('skip', 'true');
            }

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Install Playwright Browsers
        uses: ./.github/actions/playwright

      - name: Find PR number
        id: find-pr
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const commits = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner,
              repo,
              commit_sha: context.sha,
            });

            if (commits.data.length > 0) {
              core.setOutput('pr_number', commits.data[0].number);
            }

      - name: Update comment with test running state
        if: always() && steps.find-pr.outputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const statusEmoji = 'üîÑ';
            const comment = `### E2E Tests ${statusEmoji}\n\n` +
              `Running tests against [${deploymentUrl}](${deploymentUrl})...\n\n`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(process.env.PR_NUMBER),
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('E2E Tests')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(process.env.PR_NUMBER),
                body: comment
              });
            }

      - name: Run E2E Tests
        id: test-run
        run: pnpm run e2e:ci
        env:
          BASE_URL: ${{ steps.check-deployment.outputs.deployment_url }}
          VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}
          E2E_TESTING_SECRET: ${{ secrets.E2E_TESTING_SECRET }}

      - name: Upload Playwright Test Report
        if: always() && hashFiles('.next/playwright-report/**') != ''
        id: upload-results
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_bucket: apadana-e2e
          source_dir: '.next/playwright-report'
          destination_dir: ${{ github.event.workflow_run.head_sha || github.sha }}

      - name: Comment on PR
        if: always() && steps.find-pr.outputs.pr_number
        uses: actions/github-script@v7
        with:
          script: |
            const testStatus = '${{ steps.test-run.outcome }}';
            const deploymentUrl = '${{ steps.check-deployment.outputs.deployment_url }}';
            const locations = ${{ steps.upload-results.outputs.object_locations }};

            // Find the HTML report URL
            const htmlReportUrl = locations.find(url => url.endsWith('html/index.html'));
            const isSuccess = testStatus === 'success'; 
            const statusEmoji = isSuccess ? '‚úÖ' : '‚ùå';

            const comment = `### E2E Tests ${statusEmoji}\n\n` +
              `Ran against [${deploymentUrl}](${deploymentUrl})\n\n` +
              (htmlReportUrl ? `[View Full Report](${htmlReportUrl})\n\n` : '') +
              `<sub>Updated at: ${new Date().toISOString()}</sub>`;

            // Try to find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(process.env.PR_NUMBER),
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('E2E Tests')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(process.env.PR_NUMBER),
                body: comment
              });
            }
        env:
          PR_NUMBER: ${{ steps.find-pr.outputs.pr_number }}
