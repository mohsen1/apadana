name: E2E
on:
  workflow_run:
    workflows: ['CI']
    types:
      - completed
  deployment_status:

permissions:
  contents: read
  pull-requests: write
  actions: read
  checks: write
  deployments: read
  statuses: read

jobs:
  e2e:
    name: Playwright
    runs-on: ubuntu-24.04
    # Run when deployment is successful
    if: (github.event_name == 'deployment_status' && github.event.deployment_status.state == 'success')
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup
      - uses: ./.github/actions/playwright

      - name: Run E2E Tests
        id: test-run
        run: pnpm run e2e:ci
        env:
          BASE_URL: ${{ github.event.deployment_status.target_url }}
          VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}
          E2E_TESTING_SECRET: ${{ secrets.E2E_TESTING_SECRET }}

      - name: Find PR number
        id: find-pr
        if: always()
        run: |
          PR_NUMBER=$(gh pr list --search "${{ github.sha }}" --json number -q '.[0].number')
          if [ ! -z "$PR_NUMBER" ]; then
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Upload Test Report
        if: always() && hashFiles('.next/playwright-report/**') != ''
        id: upload-results
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_bucket: apadana-e2e
          source_dir: '.next/playwright-report'
          destination_dir: ${{ github.sha }}/playwright

      - name: Process Report URL
        id: process-url
        if: steps.upload-results.outputs.object_locations
        uses: actions/github-script@v7
        with:
          script: |
            const locations = JSON.parse(process.env.LOCATIONS);
            const htmlUrl = locations.find(location => location.endsWith('playwright/index.html'));
            if (!htmlUrl) { console.log("No index.html found"); }
            core.setOutput('report_url', htmlUrl);
        env:
          LOCATIONS: ${{ steps.upload-results.outputs.object_locations }}

      - name: Update PR Comment for E2E
        if: always() && steps.find-pr.outputs.pr_number
        uses: ./.github/actions/update-pr-comment
        with:
          pr_number: ${{ steps.find-pr.outputs.pr_number }}
          test_status: ${{ steps.test-run.outcome }}
          report_url: ${{ steps.process-url.outputs.report_url }}
          test_type: 'E2E'
          deployment_url: ${{ github.event.deployment_status.target_url }}

  storybook:
    name: Storybook
    runs-on: macos-14
    # Run when all CI jobs are successful
    if: github.event.workflow_run.conclusion == 'success'
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - uses: ./.github/actions/playwright

      - name: Find PR number
        id: find-pr
        if: always()
        run: |
          PR_NUMBER=$(gh pr list --search "${{ github.sha }}" --json number -q '.[0].number')
          if [ ! -z "$PR_NUMBER" ]; then
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - run: pnpm dlx playwright install

      - name: Test Storybook
        id: test-run
        run: pnpm run test:storybook

      - name: Upload Storybook Results
        if: always() && hashFiles('storybook-e2e-html-report/**') != ''
        id: upload-results
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_bucket: apadana-e2e
          source_dir: 'storybook-e2e-html-report'
          destination_dir: ${{ github.sha }}/storybook

      - name: Process Storybook Report URL
        id: process-storybook-url
        if: steps.upload-results.outputs.object_locations
        uses: actions/github-script@v7
        with:
          script: |
            const locations = JSON.parse(process.env.LOCATIONS);
            const htmlUrl = locations.find(location => location.endsWith('storybook/index.html'));
            if (!htmlUrl) { console.log("No index.html found"); }
            core.setOutput('report_url', htmlUrl);
        env:
          LOCATIONS: ${{ steps.upload-results.outputs.object_locations }}

      - name: Update PR Comment for Storybook
        if: always() && steps.find-pr.outputs.pr_number
        uses: ./.github/actions/update-pr-comment
        with:
          pr_number: ${{ steps.find-pr.outputs.pr_number }}
          test_status: ${{ steps.test-run.outcome }}
          report_url: ${{ steps.process-storybook-url.outputs.report_url }}
          test_type: 'Storybook'
