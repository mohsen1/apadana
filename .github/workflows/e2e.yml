name: Playwright E2E Tests

on:
  deployment_status:

permissions:
  contents: read
  pull-requests: write
  actions: read
  checks: write
  deployments: read
  statuses: read

jobs:
  run-e2es:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check if Deployment is successful
        id: check-deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentStatus = await github.rest.repos.getDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              status_id: context.payload.deployment_status.id
            });

            core.setOutput('deployment_status', deploymentStatus.data.state);
            core.setOutput('deployment_url', deploymentStatus.data.target_url);

            if (deploymentStatus.data.state !== 'success') {
              throw new Error(`Deployment not successful. state: ${deploymentStatus.data.state}`);
            }

      - name: Check if CI workflow have succeeded
        id: check-workflows
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const workflowRuns = await github.rest.actions.getWorkflowRun({
                owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: context.sha,
            });
            const ciRun = workflowRuns.data.workflow_runs.find(run => run.path === '.github/workflows/ci.yml');
              core.setOutput('ci_status', ciRun.conclusion);
              if (ciRun.conclusion !== 'success') throw new Error('CI workflow not successful for this SHA.');
            } catch (error) {
              if (error.status === 404) {
                core.setOutput('ci_status', 'not_found');
              } else {
                throw error;
              }
            }

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Run E2E Tests
        id: test-run
        run: pnpm run e2e:ci
        continue-on-error: true
        env:
          BASE_URL: ${{ steps.check-deployment.outputs.deployment_url }}

      - name: Upload Playwright Test Report
        id: upload-results
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_bucket: apadana-e2e
          source_dir: .next/__e2e__reports__
          destination_dir: ${{ github.event.workflow_run.head_sha || github.sha }}
      - name: Write GitHub Check
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.deployment.sha;
            const testRunOutcome = '${{ steps.test-run.outcome }}';
            const conclusion = testRunOutcome === 'success' ? 'success' : 'failure';
            const reportUrl = `https://apadana-e2e.s3.amazonaws.com/${sha}/index.html`;

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Playwright E2E Tests',
              head_sha: sha,
              status: 'completed',
              conclusion,
              details_url: reportUrl,
              output: {
                title: 'Playwright E2E Test Report',
                summary: `[**View the Playwright E2E test report**](${reportUrl})`,
                text: `# The Playwright E2E tests have ${conclusion === 'success' ? 'passed' : 'failed'}.\n\nClick [here](${reportUrl}) to view the detailed report.`
              }
            });
