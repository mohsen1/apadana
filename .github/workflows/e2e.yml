name: Playwright Tests

on:
  deployment_status:

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  run-e2es:
    if: github.event_name == 'deployment_status' && github.event.deployment_status.state == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup

      - name: Install Playwright Browsers
        run: pnpm exec playwright install  --with-deps

      - name: Run tests
        run: pnpm run e2e:ci
        env:
          BASE_URL: ${{ github.event.deployment_status.environment_url }}
          PLAYWRIGHT_START_SERVER: 'false'
          CLERK_PUBLISHABLE_KEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

      - name: Upload Playwright Test Report
        id: upload-results
        uses: shallwefootball/s3-upload-action@master
        if: always()
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws_bucket: apadana-e2e
          source_dir: .next/__e2e__reports__
          destination_dir: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Write Comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');
            const { issue_number } = context.payload.deployment.environment;
            const title = '## Playwright Test Report <!--e2e-report-->'
            const commentBody = [
              title, 
              'âœ… [View the Playwright test report](https://apadana-e2e.s3.amazonaws.com/${{ github.event.pull_request.head.sha || github.sha }}/index.html)'
            ].join('\n');

            const issueComment = await github.rest.issues.listComments({
              issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

            const comment = issueComment.data.find(comment => comment.body.includes(title))
            if (comment) {
              await github.rest.issues.updateComment({
                issue_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
                body: commentBody
              })
            } else {
              await github.rest.issues.createComment({
                issue_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              })
            }
