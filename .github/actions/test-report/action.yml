name: 'Test Report Action'
description: 'Creates or updates a check run with test report URL'

inputs:
  test-name:
    description: 'Name of the test suite (e.g., E2E Tests, Storybook Tests)'
    required: true
  test-outcome:
    description: 'Outcome of the test run'
    required: true
  report-url:
    description: 'URL to the test report'
    required: true
  app-id:
    description: 'GitHub App ID'
    required: true
  private-key:
    description: 'GitHub App private key'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Create or Update Check with Report URL
      uses: actions/github-script@v7
      env:
        PRIVATE_KEY: ${{ inputs.private-key }}
      with:
        script: |
          const { createAppAuth } = require('@octokit/auth-app');
          const { Octokit } = require('@octokit/rest');

          const auth = createAppAuth({
            appId: '${{ inputs.app-id }}',
            privateKey: process.env.PRIVATE_KEY,
            installationId: context.payload.installation?.id
          });

          try {
            const installationToken = await auth({ type: 'installation' });
            const octokit = new Octokit({ auth: installationToken.token });

            const checkName = '${{ inputs.test-name }}';

            // Try to find existing check
            const { data: checks } = await octokit.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              check_name: checkName
            });

            const params = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: checkName,
              head_sha: context.sha,
              status: 'completed',
              conclusion: '${{ inputs.test-outcome }}',
              details_url: '${{ inputs.report-url }}'
            };

            if (checks.check_runs.length > 0) {
              await octokit.checks.update({
                check_run_id: checks.check_runs[0].id,
                ...params
              });
            } else {
              await octokit.checks.create(params);
            }
          } catch (error) {
            console.error('Error:', error);
            throw error;
          }
