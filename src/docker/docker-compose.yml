services:
  nginx:
    container_name: nginx
    image: nginx:alpine
    ports:
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      app_dev:
        condition: service_healthy
      app_prod:
        condition: service_healthy
    networks:
      - apadana_network
    restart: unless-stopped
    command: >
      sh -c "
        echo '' && 
        echo '' && 
        echo '' && 
        echo '┌──────────────────────────────────────────────┐' && 
        echo '│            Now you can access                │' && 
        echo '│            https://dev.apadana.local         │' && 
        echo '│            https://prod.apadana.local        │' && 
        echo '└──────────────────────────────────────────────┘' && 
        echo '' && 
        echo '' && 
        echo '' && 
        nginx -g 'daemon off;' > /dev/null 2>&1
      "
    logging:
      driver: 'none'

  app_dev:
    container_name: app_dev
    build:
      context: ../..
      dockerfile: src/docker/Dockerfile.dev
    expose:
      - '3000'
      - '6006'
      - '5555'
    volumes:
      - ../../src:/app/src
      - ../../public:/app/public
      - ../../prisma:/app/prisma
      - ../../config:/app/config
      - ../../package.json:/app/package.json
      - ../../pnpm-lock.yaml:/app/pnpm-lock.yaml
      - app_node_modules:/app/node_modules
      - pnpm_store:/root/.pnpm-store
      - next_cache:/app/.next
    env_file:
      - ../../.env.local
    environment:
      - BUILDKIT_INLINE_CACHE=1
      - PORT=3000
      - NEXT_SHARP_PATH=/app/node_modules/sharp
      - NODE_ENV=development
      - VERCEL_URL=dev.apadana.local
      - DATABASE_URL=postgresql://admin:admin@db_dev:5432/apadana
      - HOST=dev.apadana.local
      - NEXT_PUBLIC_TEST_ENV=e2e
      - E2E_TESTING_SECRET=${E2E_TESTING_SECRET:-e2e_testing_secret_for_dev}
    depends_on:
      db_dev:
        condition: service_healthy
    networks:
      - apadana_network
    healthcheck:
      # make sure it is built and running
      test: ['CMD', 'wget', '--spider', '-q', 'http://localhost:3000']
      interval: 10s
      timeout: 5s
      retries: 100
      start_period: 10s

  app_prod:
    container_name: app_prod
    build:
      context: ../..
      dockerfile: src/docker/Dockerfile.prod
      # To build the production image, we need to provide these
      # environment variables as arguments to the Dockerfile.prod.
      args:
        - VERCEL_URL=prod.apadana.local
        - DATABASE_URL=postgresql://admin:admin@db_prod:5432/apadana
    expose:
      - '3030'
    env_file:
      - ../../.env.local
    environment:
      - BUILDKIT_INLINE_CACHE=1
      - PORT=3030
      - DATABASE_URL=postgresql://admin:admin@db_prod:5432/apadana
      - NODE_ENV=production
      - VERCEL_URL=prod.apadana.local
      - HOST=prod.apadana.local
      - E2E_TESTING_SECRET=${E2E_TESTING_SECRET:-e2e_testing_secret_for_prod}
      - NEXT_PUBLIC_TEST_ENV=e2e
    depends_on:
      db_prod:
        condition: service_healthy
    networks:
      - apadana_network
    command: >
      sh -c "
        pnpm prisma:migrate && 
        pnpm prisma db seed && 
        pnpm next:start
      "
    healthcheck:
      test:
        ['CMD', 'wget', '--spider', '-q', 'http://localhost:3030/api/health']
      interval: 10s
      timeout: 5s
      retries: 100
      start_period: 10s

  db_dev:
    container_name: db_dev
    image: postgres:16.6
    expose:
      - '5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d apadana']
      interval: 1s
      timeout: 1s
      retries: 30
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=apadana
      - POSTGRES_LOGGING=error
    command: ['postgres', '-c', 'log_min_messages=error']
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - apadana_network

  db_prod:
    image: postgres:16.6
    expose:
      - '5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d apadana']
      interval: 5s
      timeout: 10s
      retries: 10
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=apadana
      - POSTGRES_LOGGING=error
    command: ['postgres', '-c', 'log_min_messages=error']
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - apadana_network

  db_test:
    container_name: db_test
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: apadana_test
      POSTGRES_LOGGING: error
    command: ['postgres', '-c', 'log_min_messages=error']
    ports:
      - '5434:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: 'no'
    stop_signal: SIGINT
    stop_grace_period: 1m

networks:
  apadana_network:
    driver: bridge

volumes:
  app_node_modules:
  pnpm_store:
  next_cache:
  postgres_data_dev:
  postgres_data_prod:
