# syntax=docker/dockerfile:1.4

# Base stage with common dependencies
FROM node:20.18.0-slim as base
WORKDIR /app

# Install system dependencies
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt-get update && \
  apt-get install -y python3 make g++ wget grep curl && \
  rm -rf /var/lib/apt/lists/*

# Setup pnpm
RUN corepack enable && corepack prepare pnpm@9.9.0 --activate
RUN pnpm config set store-dir /root/.pnpm-store \
  && pnpm config set update-notifier false \
  && pnpm config set node-deprecation-warnings false

# Install Task
RUN --mount=type=cache,target=/root/.cache/go-build \
  sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

# Dependencies stage
FROM base as deps
WORKDIR /app

# Copy only files needed for installation
COPY pnpm-lock.yaml package.json Taskfile.yml ./

# Install dependencies with cache
RUN --mount=type=cache,target=/root/.pnpm-store,id=pnpm-store \
  task fetch && task install

# Development stage
FROM base as dev
WORKDIR /app

# Install additional dev dependencies
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt-get update && \
  apt-get install -y inotify-tools && \
  rm -rf /var/lib/apt/lists/*

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package.json /app/pnpm-lock.yaml /app/Taskfile.yml ./

ENV NODE_ENV=development \
  NODE_OPTIONS='--max-old-space-size=4096 --no-warnings'

EXPOSE 3000 6006 5555

# Copy source code
COPY . .

# Setup entrypoint
COPY src/docker/docker-entrypoint.dev.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.dev.sh

ENTRYPOINT ["docker-entrypoint.dev.sh"]

